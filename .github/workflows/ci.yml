name: VINO Project CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Lint and Test Job
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Install dependencies
        run: |
          uv sync --locked
          uv pip install pytest ruff python-dotenv

      - name: Create .env file for testing
        run: |
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" > .env
          echo "CHROMA_HOST=localhost" >> .env
          echo "CHROMA_PORT=8001" >> .env
          echo "REDIS_HOST=localhost" >> .env
          echo "REDIS_PORT=6379" >> .env

      - name: Lint with Ruff
        run: |
          uv run ruff check --fix
          uv run ruff format

      - name: Run Python tests
        run: |
          uv run pytest tests/ -v
        continue-on-error: true

  # Docker Build and Test Job
  docker-build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    strategy:
      matrix:
        service: [fastapi, reflex]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.service }} Docker image
        run: |
          docker build -f Dockerfile.${{ matrix.service }} -t vino-${{ matrix.service }}:latest .

  # Integration Test with Docker Compose
  integration-test:
    runs-on: ubuntu-latest
    needs: docker-build
    environment: production
    env:
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and start services
        run: |
          # The GOOGLE_API_KEY from the job's env is now available to docker compose
          docker compose -f docker-compose.ci.yml build
          docker compose -f docker-compose.ci.yml up -d

      - name: Wait for services to be ready
        run: |
          # Wait for FastAPI with early failure detection
          echo "Waiting for FastAPI to be ready..."
          for i in {1..24}; do  # 24 * 5 = 120 seconds total
            if curl -sf http://localhost:8000/health > /dev/null 2>&1; then
              echo "✅ FastAPI is ready!"
              break
            fi
            
            # Check for API key error in logs
            if docker compose -f docker-compose.ci.yml logs fastapi 2>/dev/null | grep -q "API key not found"; then
              echo "❌ FastAPI failed to start: API key not found"
              echo "=== FastAPI Logs ==="
              docker compose -f docker-compose.ci.yml logs fastapi
              exit 1
            fi
            
            echo "Waiting for FastAPI... (attempt $i/24)"
            sleep 5
          done
          
          # Final check
          if ! curl -sf http://localhost:8000/health > /dev/null 2>&1; then
            echo "❌ FastAPI failed to start after 120 seconds"
            echo "=== FastAPI Logs ==="
            docker compose -f docker-compose.ci.yml logs fastapi
            exit 1
          fi
          
          # Wait for Redis
          timeout 60 bash -c 'until nc -z localhost 6379; do echo "Waiting for Redis..."; sleep 2; done'
          echo "✅ Redis is ready!"

      - name: Run integration tests
        run: |
          # Test FastAPI endpoints
          curl -f http://localhost:8000/health
          curl -f http://localhost:8000/v1/admin/files
          
          # Test basic chat functionality
          curl -X POST http://localhost:8000/v1/chat \
            -H "Content-Type: application/json" \
            -d '{
              "session_id": "test-session",
              "query_text": "Hello, this is a test",
              "history": [],
              "current_step": 1
            }' || echo "Chat test failed but continuing"

      - name: Show service logs on failure
        if: failure()
        run: |
          echo "=== FastAPI Logs ==="
          docker compose -f docker-compose.ci.yml logs fastapi
          echo "=== Redis Logs ==="
          docker compose -f docker-compose.ci.yml logs redis
          echo "=== Frontend Logs ==="
          docker compose -f docker-compose.ci.yml logs frontend

      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.ci.yml down -v
          docker system prune -f